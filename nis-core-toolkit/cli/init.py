#!/usr/bin/env python3
"""
NIS Core Toolkit - Project Initialization
Creates new NIS projects with proper structure and configuration
"""

import os
import yaml
from pathlib import Path
from rich.console import Console
from rich.prompt import Prompt

console = Console()

def create_project(project_name: str, project_type: str = "basic"):
    """Create a new NIS project with proper structure"""
    
    project_dir = Path(project_name)
    
    if project_dir.exists():
        console.print(f"❌ Project directory '{project_name}' already exists", style="red")
        return False
    
    # Create project structure
    directories = [
        "agents",
        "config", 
        "logs",
        "tests",
        "data",
        "docs"
    ]
    
    console.print(f"��� Creating NIS project: {project_name}", style="bold blue")
    
    # Create main directory
    project_dir.mkdir()
    
    # Create subdirectories
    for dir_name in directories:
        (project_dir / dir_name).mkdir()
        console.print(f"  ✅ Created {dir_name}/")
    
    # Create main configuration
    config = {
        "project": {
            "name": project_name,
            "type": project_type,
            "version": "1.0.0"
        },
        "nis": {
            "protocol_version": "3.0",
            "agent_coordination": "enabled",
            "memory_backend": "redis"
        },
        "agents": {
            "max_concurrent": 10,
            "timeout_seconds": 30
        }
    }
    
    config_file = project_dir / "config" / "project.yaml"
    with open(config_file, 'w') as f:
        yaml.dump(config, f, default_flow_style=False)
    
    # Create main entry point
    main_py = project_dir / "main.py"
    main_py.write_text(f'''#!/usr/bin/env python3
"""
{project_name} - NIS Protocol System
Generated by NIS Core Toolkit
"""

import asyncio
import logging
from pathlib import Path

def setup_logging():
    """Configure logging for the system"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('logs/system.log'),
            logging.StreamHandler()
        ]
    )

async def main():
    """Main entry point for the NIS system"""
    setup_logging()
    logger = logging.getLogger(__name__)
    
    logger.info("��� Starting {project_name} NIS System...")
    logger.info("✅ System initialization complete")
    
    # Initialize agent coordination system
    # Load and configure agents from agents/ directory
    # Start agent communication protocols
    
    print("��� {project_name} is running!")
    print("��� Edit agents/ to add your intelligent agents")
    print("⚙️  Configure system in config/project.yaml")

if __name__ == "__main__":
    asyncio.run(main())
''')
    
    # Create requirements file
    requirements = project_dir / "requirements.txt"
    requirements.write_text("""# NIS Project Requirements
nis-core-toolkit>=1.0.0
nis-agent-toolkit>=1.0.0
pydantic>=2.0.0
pyyaml>=6.0
fastapi>=0.100.0
redis>=4.0.0
rich>=13.0.0
""")
    
    # Create README
    readme = project_dir / "README.md"
    readme.write_text(f"""# {project_name}

A NIS Protocol-based multi-agent system.

## Quick Start

```bash
# Install dependencies
pip install -r requirements.txt

# Run the system
python main.py

# Add agents
nis create agent my-reasoning-agent --type reasoning
```

## Project Structure

- `agents/` - Your intelligent agents
- `config/` - System configuration
- `logs/` - System logs
- `tests/` - Test suite
- `data/` - Training data and models
- `docs/` - Documentation

## Built with NIS Core Toolkit

This project uses honest engineering principles - no hype, just working tools.
""")
    
    console.print(f"✅ Project '{project_name}' created successfully!", style="bold green")
    console.print(f"��� Location: {project_dir.absolute()}")
    console.print(f"��� Next steps:")
    console.print(f"   cd {project_name}")
    console.print(f"   pip install -r requirements.txt")
    console.print(f"   python main.py")
    
    return True

def main():
    """CLI entry point for nis init"""
    project_name = Prompt.ask("Project name")
    project_type = Prompt.ask("Project type", choices=["basic", "advanced", "research"], default="basic")
    
    create_project(project_name, project_type)

if __name__ == "__main__":
    main()
